#!/bin/bash
set -eux
: ${SCRIPTS=$(readlink -f $(dirname $0))}
: ${LOCAL_JENKINS_URL=$JENKINS_URL}

export INSTANCE_TYPE=$1
export AMI_IMAGE=$2
shift; shift

FIXUP_SOURCES=""
IS_LOCAL="false"
while [[ "${1-}" != "" ]]; do
    case $1 in
        --force-archive)
            FIXUP_SOURCES="sudo sed s/ec2.archive.ubuntu.com/archive.ubuntu.com/ /etc/apt/sources.list -i"
            ;;
        --local)
            IS_LOCAL="true"
            shift
            tarfile=$1
            ;;
    esac
    shift
done

if [[ $IS_LOCAL == "false" ]]; then
    archive="$LOCAL_JENKINS_URL/job/build-revision/lastSuccessfulBuild/artifact"
    test -f buildvars.bash && rm buildvars.bash
    wget -q $archive/buildvars.bash
    source buildvars.bash
    rev=${REVNO-$(echo $REVISION_ID | head -c8)}
    echo "Testing $BRANCH $rev"

    tarfile=$($SCRIPTS/get-tarfile-name $revision_build)
    test -f $tarfile && rm $tarfile
    wget -q $archive/$tarfile
fi
tarfile_path=$(readlink -f $tarfile)
juju_version=$(basename $tarfile .tar.gz)
instance_id=$($SCRIPTS/ec2-run-instance-get-id)
$SCRIPTS/ec2-tag-job-instances $instance_id

set +x
echo Starting instance $instance_id
instance_name=$($SCRIPTS/ec2-get-name $instance_id)
echo Instance has name $instance_name
sleep 30
$SCRIPTS/wait-for-port $instance_name 22

# Define the common vars before the embedded scripts; do not make them evalaute
# what is already know in the outer script.
set -x
set +e
scp -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    $tarfile_path ubuntu@$instance_name:~/

ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" \
    ubuntu@$instance_name  <<EOT
set -eux
ssh-keygen -t rsa -b 2048 -N "" -f ~/.ssh/id_rsa
tar -xzvf $tarfile
export GOPATH=\$HOME/$juju_version
if [[ -d \$GOPATH/src/launchpad.net/juju-core ]]; then
    cd \$GOPATH/src/launchpad.net/juju-core
else
    cd \$GOPATH/src/github.com/juju/juju
fi
for attempt in \$(seq 10); do
  if grep ec2.archive.ubuntu.com /etc/apt/sources.list > /dev/null; then
    break
  elif [ "\$attempt" == "10" ]; then
    exit 1
  fi
  sleep 10
done
$FIXUP_SOURCES
needs_ppa=\$(lsb_release -sc | sed -r 's,(saucy|precise),true,')
if [[ \$needs_ppa == 'true' ]]; then
    sudo apt-add-repository -y ppa:juju/experimental;
fi
sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get install -y build-essential
# Hack rules to allow i386 to run.
sed -i 's/x86/86/' Makefile
sed -i 's/go test/go test -test.timeout=1200s/' Makefile
# Trusty needs mongodb-server and juju-mongodb
if [[ \$(lsb_release -sc) == "trusty" ]]; then
    sudo apt-get install -y mongodb-server
fi
make install-dependencies
bzr whoami 'J. Random Hacker <jrandom@example.org>'
go version || gccgo -v
make build
make check
EOT
EXIT_STATUS=$?

set -e
$SCRIPTS/ec2-terminate-job-instances
exit $EXIT_STATUS
