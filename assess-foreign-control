#!/usr/bin/env python
from argparse import ArgumentParser
from contextlib import contextmanager
from textwrap import dedent

from jujuconfig import get_juju_home
from jujupy import (
    Environment,
    EnvJujuClient,
    JujuClientDevel,
    until_timeout,
    SimpleEnvironment,
    )
from deploy_stack import (
    bootstrap_from_env,
    check_token,
    dump_logs,
    get_machine_dns_name,
    get_random_string,
    update_env,
    )


def env_from_client(client):
    """Return an Enivronment based on an EnvJujuClient, for compatibility."""
    old_style_client = JujuClientDevel(client.version, client.full_path)
    old_style_client.debug = client.debug
    return Environment(client.env.environment, old_style_client,
                       client.env.config)


def bootstrap_client(client):
    """Bootstrap using a client and its environment.

    Any stale environment is destroyed, first.
    The machine's DNS name or IP address is returned.
    If bootstrapping fails, the environment is forcibly torn down.
    """
    client.destroy_environment()
    juju_home = get_juju_home()
    env = env_from_client(client)
    try:
        bootstrap_from_env(juju_home, env)
        host = get_machine_dns_name(env, 0)
        return host
    except:
        client.destroy_environment()
        raise


@contextmanager
def dumping_env(client, host, log_dir):
    """Provide a context that always has its logs dumped at the end.

    If an exception is encountered, the environment is destroyed after
    dumping logs.
    """
    try:
        try:
            yield
        finally:
            dump_logs(client.env, host, log_dir)
    except:
        client.destroy_environment()
        raise


def prepare_dummy_env(client):
    """Use a client to prepare a dummy environment."""
    client.deploy('local:dummy-source')
    client.deploy('local:dummy-sink')
    token = get_random_string()
    client.juju('set', ('dummy-source', 'token=%s' % token))
    client.juju('add-relation', ('dummy-source', 'dummy-sink'))
    client.juju('expose', ('dummy-sink',))
    return token


def assess_foreign(native, foreign, base_env, environment_name, log_dir):
    """Top level function that prepares the clients and environment.

    native and foreign are paths to the native and foreign binaries for this
    test.  base_env is the name of the environment to base the environment on
    and environment_name is the new name for the environment.
    """
    environment = SimpleEnvironment.from_config(base_env)
    update_env(environment, environment_name, series='precise')
    environment.config.pop('tools-metadata-url', None)
    native_client = EnvJujuClient.by_version(environment, native)
    foreign_client = EnvJujuClient.by_version(environment, foreign)
    test_control_foreign(native_client, foreign_client, log_dir)


def test_control_foreign(native, foreign, log_dir):
    """Test if one binary can control an environment set up by the other."""
    host = bootstrap_client(native)
    with dumping_env(foreign, host, log_dir):
        token = prepare_dummy_env(native)
        native.wait_for_started()
        check_token(env_from_client(native), token)
        check_series(foreign)
        foreign.juju('run', ('--all', 'uname -a'))
        dummy_source = foreign.get_juju_output('get', 'dummy-source')
        env_output = foreign.get_juju_output('get-env')
        foreign.juju('remove-relation', ('dummy-source', 'dummy-sink'))
        status = foreign.get_status()
        foreign.juju('unexpose', ('dummy-sink',))
        status = foreign.get_status()
        foreign.juju('deploy', ('local:dummy-sink', 'sink2'))
        foreign.wait_for_started()
        foreign.juju('add-relation', ('dummy-source', 'sink2'))
        status = foreign.get_status()
        foreign.juju('expose', ('sink2',))
        status = foreign.get_status()
        if 'sink2' not in status.status['services']:
            raise AssertionError('Sink2 missing')
        foreign.juju('destroy-service', ('sink2',))
        for ignored in until_timeout(30):
            status = foreign.get_status()
            if 'sink2' not in status.status['services']:
                break
        else:
            raise AssertionError('Sink2 not destroyed')
        foreign.juju('add-relation', ('dummy-source', 'dummy-sink'))
        status = foreign.get_status()
        foreign.juju('expose', ('dummy-sink',))
        status = foreign.get_status()
        foreign.juju('add-unit', ('dummy-sink',))
        status = foreign.get_status()
        foreign.juju('remove-unit', ('dummy-sink/1',))
        status = foreign.get_status()
        foreign.juju('add-machine', ('lxc',))
        status = foreign.wait_for_started()
        lxc_machine, = set(k for k, v in status.agent_items() if
                          k.endswith('/lxc/0'))
        lxc_holder = lxc_machine.split('/')[0]
        foreign.juju('remove-machine', (lxc_machine,))
        wait_until_removed(foreign, lxc_machine)
        foreign.juju('remove-machine', (lxc_holder,))
        status = wait_until_removed(foreign, lxc_holder)
    # Test clean shutdown of an environment.
    foreign.juju(
        'destroy-environment', (foreign.env.environment, '-y'),
        include_e=False)


def wait_until_removed(client, agent_id):
    """Wait for an agent to be removed from the environment."""
    for ignored in until_timeout(30):
        status = client.get_status()
        if agent_id not in dict(status.agent_items()):
            return status
    else:
        raise AssertionError('Machine not destroyed')


def check_series(client):
    """Use 'juju ssh' to check that the deployed series meets expectations."""
    result = client.get_juju_output('ssh', '0', 'lsb_release', '-c')
    label, codename = result.rstrip().split('\t')
    if label != 'Codename:':
        raise AssertionError()
    expected_codename = client.env.config['default-series']
    if codename != expected_codename:
        raise AssertionError(
            'Series is {}, not {}'.format(codename, expected_codename))


def main():
    parser = ArgumentParser(description=dedent("""\
        Determine whether one juju version can control an environment created
        by another version.
    """))
    parser.add_argument('native', help='The native juju binary.')
    parser.add_argument('foreign', help='The foreign juju binary.')
    parser.add_argument('base_environment', help='The environment to base on.')
    parser.add_argument('environment_name', help='The new environment name.')
    parser.add_argument('log_dir', help='The directory to dump logs to.')
    args = parser.parse_args()
    assess_foreign(args.native, args.foreign, args.base_environment,
                   args.environment_name, args.log_dir)


if __name__ == '__main__':
    main()
