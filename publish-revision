#!/bin/bash
set -eux

: ${LOCAL_JENKINS_URL=$JENKINS_URL}
TARFILE=$($SCRIPTS/get-tarfile-name)
VERSION=$(basename $TARFILE .tar.gz | cut -d '_' -f2)
wget -q $LOCAL_JENKINS_URL/job/build-revision/lastSuccessfulBuild/artifact/$TARFILE

# Make source packages for all supported series.
if [[ $VERSION =~ ^1.(18|20|22).*$ ]]; then
    PURPOSE="stable"
else
    PURPOSE="devel"
fi
$RELEASE_TOOLS/make-source-packages.bash -t $PURPOSE $TARFILE \
    'Curtis Hovey <curtis.hovey@canonical.com>'

# Load the credentials to create instances in ec2.
set +x
source $JUJU_HOME/ec2rc
set -x

# Build binary packages for select series.
for dsc in $(find . -maxdepth 2 -name '*.dsc')
do
    series=$(echo "$dsc" | cut -d '~' -f 2 | cut -d '.' -f 1,2)
    if [[ $series == '12.04' ]]; then
        echo "Building precise amd64"
        $RELEASE_TOOLS/build-package-with-dsc.bash localhost '' $dsc
    elif [[ $series == '13.10' ]]; then
        echo "Skipping Saucy"
    elif [[ $series == '14.04' ]]; then
        if [[ -n ${PPC_SSH_OPTIONS:-} ]]; then
            echo "Building trusty ppc64"
            $RELEASE_TOOLS/build-package-with-dsc.bash ubuntu@stilson-07 \
                "$PPC_SSH_OPTIONS" $dsc
        else
            echo "Skipping trusty ppc64"
        fi
        echo "Building trusty amd64"
        $RELEASE_TOOLS/build-package-with-dsc.bash m1.large ami-018c9568 $dsc
        echo "Building trusty i386"
        $RELEASE_TOOLS/build-package-with-dsc.bash m1.medium ami-81dee0e8 $dsc
        if [[ -n ${ARM_SSH_OPTIONS:-} ]]; then
            echo "Building trusty arm64"
            $RELEASE_TOOLS/build-package-with-dsc.bash ubuntu@arm64vm \
                "$ARM_SSH_OPTIONS" $dsc
        else
            echo "Skipping trusty arm64"
        fi
    elif [[ $series == '14.10' ]]; then
        echo "Skipping utopic amd64"
        # The daily images have apt issues.
        #$RELEASE_TOOLS/build-package-with-dsc.bash m1.large ami-f83ad690 $dsc
    fi
done

mkdir -p new-tools
if [[ -n ${LOCAL_TOOLS_CACHE:-} ]]; then
    # Using the local cache is much faster, and represents how
    # streams.canonical.com manages its tools
    mkdir -p new-tools/tools/releases
    cp $LOCAL_TOOLS_CACHE/*.tgz new-tools/tools/releases
fi
$RELEASE_TOOLS/assemble-public-tools.bash -t $WORKSPACE/ $VERSION new-tools
$RELEASE_TOOLS/publish-public-tools.bash testing new-tools/juju-dist-testing cpc
