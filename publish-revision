#!/bin/bash
set -eux

: ${SCRIPTS=$(readlink -f $(dirname $0))}
BUILD_PACKAGES=${BUILD_PACKAGES:-true}
BUILD_i386=${BUILD_i386:-true}
TARFILE=$($SCRIPTS/jujuci.py get build-revision 'juju-core_*.tar.gz' ./)
VERSION=$(basename $TARFILE .tar.gz | cut -d '_' -f2)

OFFICIAL_VERSIONS="$STREAMS/juju-dist/proposed/tools/releases"
if [[ -f $OFFICIAL_VERSIONS/juju-$VERSION-trusty-amd64.tgz ]]; then
    echo "$VERSION was published. This version is invalid to test."
    echo "Maybe juju's version needs updating?"
    exit 1
fi

if [[ $BUILD_PACKAGES == 'true' ]]; then
# Make source packages for all supported series.
$RELEASE_TOOLS/make-source-packages.bash -t devel $TARFILE \
    'Curtis Hovey <curtis.hovey@canonical.com>'

# Load the credentials to create instances in ec2.
set +x
source $JUJU_HOME/ec2rc
set -x

# Build binary packages for select series.
for dsc in $(find . -maxdepth 2 -name '*.dsc')
do
    series=$(echo "$dsc" | cut -d '~' -f 2 | cut -d '.' -f 1,2)
    if [[ $series == '12.04' ]]; then
        echo "Building precise amd64"
        AMI=$($SCRIPTS/get_ami.py precise amd64)
        $RELEASE_TOOLS/build-package-with-dsc.bash m1.large $AMI $dsc
    elif [[ $series == '13.10' ]]; then
        echo "Skipping Saucy"
    elif [[ $series == '14.04' ]]; then
        if [[ -n ${PPC_SSH_OPTIONS:-} ]]; then
            echo "Building trusty ppc64"
            set +e
            $RELEASE_TOOLS/build-package-with-dsc.bash ubuntu@stilson-07 \
                "$PPC_SSH_OPTIONS" $dsc
            set -e
        else
            echo "Skipping trusty ppc64"
        fi
        echo "Building trusty amd64"
        AMI=$($SCRIPTS/get_ami.py trusty amd64)
        $RELEASE_TOOLS/build-package-with-dsc.bash m1.large $AMI $dsc
        if [[ $BUILD_i386 == "true" ]]; then
            echo "Building trusty i386"
            if [[ -n ${I386_SSH_OPTIONS:-} ]]; then
                $RELEASE_TOOLS/build-package-with-dsc.bash ubuntu@i386-slave \
                        "$I386_SSH_OPTIONS" $dsc
            else
                AMI=$($SCRIPTS/get_ami.py trusty i386)
                $RELEASE_TOOLS/build-package-with-dsc.bash \
                    m1.medium $AMI $dsc
            fi
        else
            echo "Skipping trusty i386"
        fi
        if [[ -n ${ARM_SSH_OPTIONS:-} ]]; then
            echo "Building trusty arm64"
            set +e
            $RELEASE_TOOLS/build-package-with-dsc.bash ubuntu@arm64-slave \
                "$ARM_SSH_OPTIONS" $dsc
            set -e
        else
            echo "Skipping trusty arm64"
        fi
    elif [[ $series == '14.10' ]]; then
        echo "Building utopic amd64"
        $RELEASE_TOOLS/build-package-with-dsc.bash ubuntu@utopic-slave \
                "$UTOPIC_SSH_OPTIONS" $dsc
    elif [[ $series == '15.04' ]]; then
        echo "Building vivid amd64"
        $RELEASE_TOOLS/build-package-with-dsc.bash ubuntu@vivid-slave \
                "$VIVID_SSH_OPTIONS" $dsc
    fi
done
fi

# These agents are built while the debs are built. This is safe to do because
# the debs take 45 minutes. When this script is dismantled, the job
# that publishes the revision will require build-centos, build-win-agen,
# and the new build-packages job.
$SCRIPTS/jujuci.py get -b lastBuild \
    build-centos juju-*centos7-amd64.tgz $WORKSPACE
WIN2012=$($SCRIPTS/jujuci.py get -b lastBuild \
    build-win-agent juju-*win2012-amd64.tgz $WORKSPACE)
WIN2012R2=$(echo $WIN2012 | sed -e 's,win2012-,win2012r2-,')
cp $WIN2012 $WIN2012R2

$RELEASE_TOOLS/assemble-streams.bash -n -t $WORKSPACE/ testing $VERSION $STREAMS
PUBLISH_ARGS="testing $STREAMS/juju-dist cpc"
$RELEASE_TOOLS/publish-public-tools.bash $PUBLISH_ARGS || \
    $RELEASE_TOOLS/publish-public-tools.bash $PUBLISH_ARGS || \
        $RELEASE_TOOLS/publish-public-tools.bash $PUBLISH_ARGS
