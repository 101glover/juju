#!/usr/bin/env python
from argparse import ArgumentParser
from contextlib import contextmanager

from jujuconfig import get_juju_home
from jujupy import (
    Environment,
    JujuClientDevel,
    until_timeout,
    )
from deploy_stack import (
    bootstrap_from_env,
    check_token,
    dump_logs,
    get_machine_dns_name,
    get_random_string,
    update_env,
    )


def bootstrap_env(env):
    env.destroy_environment()
    juju_home = get_juju_home()
    try:
        bootstrap_from_env(juju_home, env)
        host = get_machine_dns_name(env, 0)
        return host
    except:
        env.destroy_environment()
        raise


@contextmanager
def dumping_env(env, host, log_dir):
    try:
        try:
            yield
        finally:
            dump_logs(env, host, log_dir)
    except:
        env.destroy_environment()
        raise


def prepare_dummy_env(env):
    env.deploy('local:dummy-source')
    env.deploy('local:dummy-sink')
    token = get_random_string()
    env.juju('set', 'dummy-source', 'token=%s' % token)
    env.juju('add-relation', 'dummy-source', 'dummy-sink')
    env.juju('expose', 'dummy-sink')
    return token


def assess_compatibility(old_juju, new_juju, base_env, environment_name,
                         log_dir):
    old_env = Environment.from_config(base_env, juju_path=old_juju)
    update_env(old_env, environment_name, series='precise')
    old_env.config.pop('tools-metadata-url', None)
    new_client = JujuClientDevel.by_version(new_juju)
    new_env = Environment(old_env.environment, new_client, old_env.config)
    test_control_foreign(old_env, new_env, log_dir)
#    print('Test manipulating new environment with old client.')
#    test_control_foreign(new_env, old_env)
    #print('Test upgrading old environment to new.')
    #test_upgrade(old_juju, new_juju, base_env, environment_name)


def test_control_foreign(env, other_env, log_dir):
    host = bootstrap_env(env)
    with dumping_env(other_env, host, log_dir):
        token = prepare_dummy_env(env)
        env.wait_for_started()
        check_token(env, token)
        check_series(other_env)
        other_env.juju('run', '--all', 'uname -a')
        dummy_source = other_env.get_juju_output('get', 'dummy-source')
        env_output = other_env.get_juju_output('get-env')
        other_env.juju('remove-relation', 'dummy-source', 'dummy-sink')
        status = other_env.get_status()
        other_env.juju('unexpose', 'dummy-sink')
        status = other_env.get_status()
        other_env.juju('deploy', 'local:dummy-sink', 'sink2')
        other_env.wait_for_started()
        other_env.juju('add-relation', 'dummy-source', 'sink2')
        status = other_env.get_status()
        other_env.juju('expose', 'sink2')
        status = other_env.get_status()
        if 'sink2' not in status.status['services']:
            raise AssertionError('Sink2 missing')
        other_env.juju('destroy-service', 'sink2')
        for ignored in until_timeout(30):
            status = other_env.get_status()
            if 'sink2' not in status.status['services']:
                break
        else:
            raise AssertionError('Sink2 not destroyed')
        other_env.juju('add-relation', 'dummy-source', 'dummy-sink')
        status = other_env.get_status()
        other_env.juju('expose', 'dummy-sink')
        status = other_env.get_status()
        other_env.juju('add-unit', 'dummy-sink')
        status = other_env.get_status()
        other_env.juju('remove-unit', 'dummy-sink/1')
        status = other_env.get_status()
        other_env.juju('add-machine', 'lxc')
        status = other_env.wait_for_started()
        lxc_machine, = set(k for k, v in status.agent_items() if
                          k.endswith('/lxc/0'))
        lxc_holder = lxc_machine.split('/')[0]
        other_env.juju('remove-machine', lxc_machine)
        wait_until_removed(other_env, lxc_machine)
        other_env.juju('remove-machine', lxc_holder)
        status = wait_until_removed(other_env, lxc_holder)
    other_env.client.juju(
        None, 'destroy-environment', (other_env.environment, '-y'))



def wait_until_removed(env, agent_id):
    for ignored in until_timeout(30):
        status = env.get_status()
        if agent_id not in dict(status.agent_items()):
            return status
    else:
        raise AssertionError('Machine not destroyed')


def get_agent_version(env):
    return env.client.get_env_option(env, 'agent-version')


def test_upgrade(env, new_env, base_env, environment_name):
    host = bootstrap_env(env)
    with dumping_env(env, host):
        token = prepare_dummy_env(env)
        env.wait_for_started()
        check_token(env, token)
        matching_version = new_env.get_matching_agent_version().split('.')
        old_agent_version = get_agent_version(new_env)
        while old_agent_version.split('.') < matching_version:
            new_env.upgrade_juju()
            new_agent_version = get_agent_version(new_env)
            if new_agent_version == old_agent_version:
                raise AssertionError
            new_env.wait_for_version(new_agent_version)
            old_agent_version = new_agent_version
        check_token(new_env, token)
    new_env.destroy_environment()


def check_series(env):
    result = env.get_juju_output('ssh', '0', 'lsb_release', '-c')
    label, codename = result.rstrip().split('\t')
    if label != 'Codename:':
        raise AssertionError()
    expected_codename = env.config['default-series']
    if codename != expected_codename:
        raise AssertionError(
            'Series is {}, not {}'.format(codename, expected_codename))


def main():
    parser = ArgumentParser('assess-compatibility')
    parser.add_argument('old_juju', help='The old juju binary')
    parser.add_argument('new_juju', help='The new juju binary')
    parser.add_argument('base_environment', help='The environment to base on.')
    parser.add_argument('environment_name', help='The new environment name.')
    parser.add_argument('log_dir', help='The directory to dump logs to.')
    args = parser.parse_args()
    assess_compatibility(args.old_juju, args.new_juju, args.base_environment,
                         args.environment_name, args.log_dir)


if __name__ == '__main__':
    main()
