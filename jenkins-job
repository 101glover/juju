#!/bin/bash
set -eu
CURRENT_JUJU_CORE="juju-core=$(apt-cache madison juju-core|grep 'ppa.launchpad.net/juju/stable/ubuntu/ .* Packages'|sed -r 's/.*juju-core \| *([^ ]*) .*/\1/')"
destroy_all(){
  for env in $ENVS; do
    $SCRIPTS/destroy-environment $env
  done
}
dump_logs(){
  artifacts_path=$WORKSPACE/artifacts
  mkdir -p $artifacts_path
  for env in $ENVS; do
    log_path=${artifacts_path}/all-machines-${env}.log
    if juju scp -e $env -- -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -i $HOME/juju-ci/staging-juju-rsa 0:/var/log/juju/all-machines.log $log_path; then
      gzip $log_path
    fi
  done
}
revert_juju(){
    sudo apt-get install -y --force-yes $CURRENT_JUJU_CORE
}
revert_juju
source $SCRIPTS/make-release-tarball.bash $REVNO $BRANCH
source $SCRIPTS/make-package-with-tarball.bash testing $TARFILE \
    'Curtis Hovey <curtis.hovey@canonical.com>'
export PACKAGE
if ! $SCRIPTS/deploy_stack.py $ENVS; then
  dump_logs
  destroy_all
  exit 1
fi
EXIT_STATUS=0
# Test upgrading an existing environment
if ! bash <<"EOT"
  set -e
  sudo dpkg -i $PACKAGE
  mkdir -p new-tools
  $SCRIPTS/assemble-public-tools.bash $PACKAGE new-tools
  $SCRIPTS/publish-public-tools.bash TESTING ./juju-dist-testing
  version=$(juju --version|sed -r 's/([^-]*).*/\1/')
  for env in $ENVS; do
    if [ "$env" == "local" ]; then
      extra_args="--upload-tools "
    else
      extra_args=""
    fi
    juju upgrade-juju $extra_args--show-log -e $env --version $version
  done
  for env in $ENVS; do
    if [ "$env" == "local" ]; then
      full_version="$version.1"
    else
      full_version="$version"
    fi
    $SCRIPTS/wait_for_agent_update.py $env $full_version
  done
EOT
then
  EXIT_STATUS=1
else
  # test deploying on the new version
  destroy_all
  sleep 5
  if ! $SCRIPTS/deploy_stack.py $ENVS; then
    EXIT_STATUS=1
  fi
fi
if [ $EXIT_STATUS -ne 0 ]; then
  dump_logs
fi
revert_juju
destroy_all
exit $EXIT_STATUS
