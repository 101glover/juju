#!/bin/bash
set -eu
CURRENT_JUJU_CORE="juju-core=$(apt-cache madison juju-core|grep 'ppa.launchpad.net/juju/stable/ubuntu/ .* Packages'|sed -r 's/.*juju-core \| *([^ ]*) .*/\1/')"
destroy_all(){
  for env in $ENVS; do
    $SCRIPTS/destroy-environment $env
  done
}
dump_logs(){
  artifacts_path=$WORKSPACE/artifacts
  mkdir -p $artifacts_path
  for env in $ENVS; do
    log_path=${artifacts_path}/all-machines-${env}.log
    if juju scp -e $env -- -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" -i $HOME/juju-ci/staging-juju-rsa 0:/var/log/juju/all-machines.log $log_path; then
      gzip $log_path
    fi
  done
}
revert_juju(){
    sudo apt-get install -y --force-yes $CURRENT_JUJU_CORE
}
# Try to ensure a clean environment
revert_juju
destroy_all

# Create package
source $SCRIPTS/make-release-tarball.bash $REVNO $BRANCH
source $SCRIPTS/make-package-with-tarball.bash testing $TARFILE \
    'Curtis Hovey <curtis.hovey@canonical.com>'
# Now that we aren't sourcing credentials, it's safe to enable command echo.
set -x
export PACKAGE

# Do the deployment for upgrade testing.
if ! bash <<EOT
set -ex
mkdir -p new-tools
$SCRIPTS/assemble-public-tools.bash $PACKAGE new-tools
$SCRIPTS/publish-public-tools.bash TESTING new-tools/juju-dist-testing
$SCRIPTS/deploy_stack.py $ENVS
EOT
then
  dump_logs
  revert_juju
  destroy_all
  exit 1
fi
EXIT_STATUS=0

sudo dpkg -i $PACKAGE
$SCRIPTS/test-new-version || EXIT_STATUS=$?
if [ $EXIT_STATUS -ne 0 ]; then
  dump_logs
fi
revert_juju
destroy_all
exit $EXIT_STATUS
