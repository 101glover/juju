#!/bin/bash -eux
total_timeout="$(action-get total-timeout)"
enablement_timeout="$(action-get enablement-timeout)"
dry_run="$(config-get dry-run)"
chaos_dir="$(config-get chaos-dir)"
action-set action-parameters.chaos-dir="${chaos_dir}"
action-set action-parameters.charm-dir="${CHARM_DIR}"
action-set action-parameters.dry-run="${dry_run}"
action-set action-parameters.monkey-id=${JUJU_ACTION_TAG#action-}
action-set action-parameters.enablement-timeout="${enablement_timeout}"
action-set action-parameters.total-timeout="${total_timeout}"

# Create a unique directory to run and log this monkeys actions.
target_dir=${chaos_dir}/chaos_monkey.${JUJU_ACTION_TAG#action-}
mkdir -p ${target_dir}/log
if [[ -d ${CHARM_DIR}/juju-chaos-monkey ]]; then
    cp -a ${CHARM_DIR}/juju-chaos-monkey ${target_dir}
fi

# Run the Chaos Monkey
cmd="python ${target_dir}/juju-chaos-monkey/runner.py"
cmd+=" --lock-file ${target_dir}/juju-chaos-monkey.run"
if [[ -n ${total_timeout:-} ]]; then
    cmd+=" --total-timeout ${total_timeout}"
fi
if [[ -n ${enablement_timeout:-} ]]; then
    cmd+=" --enablement-timeout ${enablement_timeout}"
fi
action-set action-info.runner-cmd="${cmd}"
action-set action-info.runner-log="${target_dir}/log/results.log"
if [[ ${dry_run-} != True ]]; then
    # Start the Chaos runner in a subprocess with nohup and in the background.
    # In this way it's PPID becomes init and further juju actions are not
    # blocked.
    touch ${target_dir}/juju-chaos-monkey.run
    (nohup ${cmd} >> ${target_dir}/log/resutls.log 2>&1 &)
fi
