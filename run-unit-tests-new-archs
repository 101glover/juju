#!/bin/bash

# IMPORTANT: The ssh options are always remapped to $@ which preserves
# their tokenisation.

set -eux
: ${LOCAL_JENKINS_URL=$JENKINS_URL}
ssh_options='-o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null"'
remote_user="ubuntu"

if [[ $1 =~ .*@.* ]]; then
    is_ephemeral="false"
    remote_user=$(echo $1 | cut -d @ -f1)
    instance_name=$(echo $1 | cut -d @ -f2)
    shift
    eval "set -- $ssh_options $@"
else
    is_ephemeral="true"
    export INSTANCE_TYPE=$1
    export AMI_IMAGE=$2
    eval "set -- $ssh_options"
fi

if [[ $is_ephemeral == "true" ]]; then
    instance_id=$($SCRIPTS/ec2-run-instance-get-id)
    $SCRIPTS/ec2-tag-job-instances $instance_id
    set +x
    echo Starting instance $instance_id
    instance_name=$($SCRIPTS/ec2-get-name $instance_id)
    echo Instance has ip $instance_name
    sleep 30
    $SCRIPTS/wait-for-port $instance_name 22
fi

# Define common vars for remote scripts; do not make them evalaute
# what is known in this script to ensure the logs line order is sane.
afact='lastSuccessfulBuild/artifact'
wget -q $LOCAL_JENKINS_URL/job/build-revision/$afact/buildvars.bash
source buildvars.bash
echo "Testing $BRANCH $REVNO on $ENV"

tarfile_path=$(find $HOME/jobs/build-revision/lastStable/archive/ -name juju-core*.tar.gz)
tarfile=$(basename $tarfile_path)
juju_version=$(basename $tarfile .tar.gz)

set -x
set +e
DEPS="build-essential bzr distro-info-data git-core mercurial zip rsyslog-gnutls"
ssh "$@" $remote_user@$instance_name  <<EOT
set -eux
if [[ $is_ephemeral == "true" ]]; then
    for attempt in \$(seq 10); do
        if grep -r '^deb .* universe$' /etc/apt/sources.list > /dev/null; then
            break
        elif [ "\$attempt" == "10" ]; then
            echo "Universe is not available to install packages from."
            exit 1
        fi
        sleep 10m
    done
fi
sudo apt-get update
if [[ $is_ephemeral == "true" ]]; then
    # sudo apt-get upgrade -y
    echo "Skipping upgrade."
fi
if [[ \$(apt-cache madison juju-mongodb) =~ .*juju-mongodb.* ]]; then
    juju_db="juju-mongodb"
else
    juju_db="mongodb-server"
fi
if [[ \$(uname -p) =~  .*86|armel|armhf.* ]]; then
    juju_compiler="golang"
else
    juju_compiler="gccgo-4.9 gccgo-go"
fi
sudo apt-get install -y $DEPS \$juju_db \$juju_compiler
EOT

scp "$@" $tarfile_path $remote_user@$instance_name:~/

ssh "$@" $remote_user@$instance_name <<EOT
set -eux
if [[ ! -f ~/.ssh/id_rsa ]]; then
    ssh-keygen -t rsa -b 2048 -N "" -f ~/.ssh/id_rsa
fi
export GOPATH=\$HOME/$juju_version
if [[ -d \$GOPATH ]]; then
  rm -r \$GOPATH
fi
tar -xzvf $tarfile
cd \$GOPATH/src/launchpad.net/juju-core
bzr whoami 'J. Random Hacker <jrandom@example.org>'
make build
# Hack match for i386.
sed -i 's/x86/86/' Makefile
make install
make check
EOT
EXIT_STATUS=$?


# Capture the jujud to make a tool.
version=$(echo $juju_version | cut -d _ -f2)
scp "$@" $remote_user@$instance_name:~/$juju_version/bin/jujud ./
series_arch=$(ssh "$@" $remote_user@$instance_name \
    "echo \$(lsb_release -sc)-\$(uname -p | sed -r 's/.*ppc.*/ppc64el/')")
tool="./juju-${version}-${series_arch}.tgz"
tar cvfz $tool jujud
echo "Created $tool."


if [[ $is_ephemeral == "true" ]]; then
    $SCRIPTS/ec2-terminate-job-instances
fi

exit $EXIT_STATUS
